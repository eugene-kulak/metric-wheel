# vim ft=yaml
# CI on Windows via appveyor

environment:
  global:
    REPO_DIR: metric
    PACKAGE_DIR: 'metric\python'
    PACKAGE_NAME: metric-py
    BUILD_COMMIT: master
    NP_TEST_DEP: "pytest numpy"
    BOOST_ROOT: "C:/Libraries/boost_1_71_0"
    GNOME_BASE_URL: "http://ftp.gnome.org/pub/gnome/binaries/win32"
    PKG_CONFIG: "C:/pkg-config/bin/pkg-config.exe"
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    MINICONDA: C:\Miniconda38-x64
    TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
    PYPI_KEY:
      secure: LXbpirAQmTMzUkyu0Zncq+h0IPPxNbR/55UJx8tFHjSyeSAUKDgD5Zvd4RrlnTUR2No3w7O2mbMgbZZ5vFtG6AQXvJjLcTXn/YKsC8wUYjb0QbXAcVfYQaGq0XuxkjwHwq1BxEpSZRkwwWIyjKzYy296k7LmGsx+pREcSODBV/GMhFRaiCQ4RC/iPOmc/QhJWnHr3e6+wHOBvSwGLoYeQEbU7mkYM8jOA3rUYoch1+Q=


  matrix:
    - PYTHON: 3.8
    - PYTHON: 3.6
    - PYTHON: 3.7

platform:
  - x64
# there is no 32bit pre-builds for OpenBLAS
#  - Win32

matrix:
    fast_finish: true

install:
  # Fetch submodules
  - git submodule update --init --recursive
  # Install new Python if necessary
  #- ps: .\multibuild\install_python.ps1

  # install OpenBLAS
  - '%MINICONDA%\Scripts\activate.bat'
  - conda config --add channels conda-forge
  - conda update -n base conda -y
  - conda create --name build_env -y python=%PYTHON%
  - conda activate build_env
  - conda install -c conda-forge libopenblas openblas -y

  # Install PkgConfig
  - curl -LO %GNOME_BASE_URL%/dependencies/pkg-config_0.26-1_win32.zip
  - curl -LO %GNOME_BASE_URL%/glib/2.28/glib_2.28.8-1_win32.zip
  - curl -LO %GNOME_BASE_URL%/dependencies/gettext-runtime_0.18.1.1-2_win32.zip
  - 7z x -y pkg-config_0.26-1_win32.zip -oC:\pkg-config > nul
  - 7z x -y glib_2.28.8-1_win32.zip -oC:\pkg-config > nul
  - 7z x -y gettext-runtime_0.18.1.1-2_win32.zip -oC:\pkg-config > nul

build_script:
  # Check that we have the expected version and architecture for Python
  - python -c "import struct; print(struct.calcsize('P') * 8)"

  # Install the dependencies of the project.
  - SET CMAKE_GENERATOR_PLATFORM=%platform%
  - python -m pip install -U pip setuptools wheel urllib3

  # Build wheel
  - cd %PACKAGE_DIR%
  - python setup.py bdist_wheel

test_script:
  # create test env
  - conda create --name test_env -y python=%PYTHON%
  - conda activate test_env
  - conda install -c conda-forge libopenblas -y
  - python -m pip install %NP_TEST_DEP%

  # install from wheel
  - python -m pip install --pre --no-index --find-links=dist %PACKAGE_NAME%
  - python -m pytest tests

#artifacts:
#  - path: '%PACKAGE_DIR%\dist\'

on_success:
  # Upload to the selected PYPI server
  - python -m pip install twine
  - SET TWINE_USERNAME=__token__
  - SET TWINE_PASSWORD=%PYPI_KEY%
  - dir
  - twine upload --verbose dist\*
