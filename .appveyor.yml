# vim ft=yaml
# CI on Windows via appveyor

environment:
  global:
    REPO_DIR: metric
    PACKAGE_DIR: metric/python
    PACKAGE_NAME: metric-py
    BUILD_COMMIT: master
    NP_BUILD_DEP: "auditwheel==3.1.0"
    NP_TEST_DEP: "pytest numpy"
    BOOST_ROOT: "C:/Libraries/boost_1_71_0"
    GNOME_BASE_URL: "http://ftp.gnome.org/pub/gnome/binaries/win32"
    PKG_CONFIG: "C:/pkg-config/bin/pkg-config.exe"
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    MINICONDA: C:\Miniconda38-x64

  matrix:
#    - PYTHON: C:\Python36
#      CMAKE_GENERATOR_PLATFORM: Win32
    - PYTHON: C:\Python36-x64
      CMAKE_GENERATOR_PLATFORM: x64
    - PYTHON: C:\Python37
#      CMAKE_GENERATOR_PLATFORM: Win32
    - PYTHON: C:\Python37-x64
#      CMAKE_GENERATOR_PLATFORM: x64
    - PYTHON: C:\Python38
#      CMAKE_GENERATOR_PLATFORM: Win32
    - PYTHON: C:\Python38-x64
#      CMAKE_GENERATOR_PLATFORM: x64

matrix:
    fast_finish: true

install:
  # Fetch submodules
  - git submodule update --init --recursive
#  - if %platform% == "x64" SET PYTHON="%PYTHON%-%platform%"
  # Install new Python if necessary
  - ps: .\multibuild\install_python.ps1

  # install OpenBLAS
  - '%MINICONDA%\Scripts\activate'
  - SET PATH=%MINICONDA%;%MINICONDA%\Scripts;%PATH%
  - conda update -n base conda -y
  - conda config --add channels conda-forge
  - conda install -y libopenblas openblas

#  - SET PATH=%PATH%;%BLAS_ROOT%\lib
  - python -m pip install -U pip setuptools wheel urllib3

  # Install PkgConfig
  - curl -LO %GNOME_BASE_URL%/dependencies/pkg-config_0.26-1_win32.zip
  - curl -LO %GNOME_BASE_URL%/glib/2.28/glib_2.28.8-1_win32.zip
  - curl -LO %GNOME_BASE_URL%/dependencies/gettext-runtime_0.18.1.1-2_win32.zip
  - 7z x -y pkg-config_0.26-1_win32.zip -oC:\pkg-config > nul
  - 7z x -y glib_2.28.8-1_win32.zip -oC:\pkg-config > nul
  - 7z x -y gettext-runtime_0.18.1.1-2_win32.zip -oC:\pkg-config > nul

build_script:
  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

  # Install the dependencies of the project.
  - python -m pip install %NP_BUILD_DEP%

  # Build wheel
  - python -m pip install wheel
  - cd %PACKAGE_DIR%
  - python setup.py bdist_wheel

test_script:
  # create test env
  - conda create --name test_env -y
  - CALL conda.bat activate test_env
  - python -m pip install %NP_TEST_DEP%

  # install from wheel
  - python -m pip install --pre --no-index --find-links %PACKAGE_DIR%\dist\%PACKAGE_NAME%
  - pytest tests

artifacts:
  - path: "%PACKAGE_DIR%\\dist\\*"

on_success:
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - python -m pip install wheelhouse-uploader
  - "python -m wheelhouse_uploader upload --no-ssl-check --local-folder=%PACKAGE_DIR%\\dist --no-update-index wheels"
