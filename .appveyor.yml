# vim ft=yaml
# CI on Windows via appveyor

environment:
  global:
    REPO_DIR: metric
    PACKAGE_DIR: metric/python
    PACKAGE_NAME: metric-py
    BUILD_COMMIT: master
    NP_BUILD_DEP: "auditwheel==3.1.0"
    NP_TEST_DEP: "pytest"
    BOOST_ROOT: "C:/Libraries/boost_1_71_0"
    GNOME_BASE_URL: "http://ftp.gnome.org/pub/gnome/binaries/win32"
    #BLAS_LIBRARIES: "C:/opt/lib"
    MKL_THREADING_LAYER: GNU
    PKG_CONFIG: "C:/pkg-config/bin/pkg-config.exe"
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    BLAS_ROOT: "C:\\openblas\\OpenBLAS-v0.2.15-Win64-int32"

  matrix:
#    - PYTHON: C:\Python36
#      CMAKE_GENERATOR_PLATFORM: Win32
    - PYTHON: C:\Python36-x64
      CMAKE_GENERATOR_PLATFORM: x64
    - PYTHON: C:\Python37
      CMAKE_GENERATOR_PLATFORM: Win32
    - PYTHON: C:\Python37-x64
      CMAKE_GENERATOR_PLATFORM: x64
    - PYTHON: C:\Python38
      CMAKE_GENERATOR_PLATFORM: Win32
    - PYTHON: C:\Python38-x64
      CMAKE_GENERATOR_PLATFORM: x64

matrix:
    fast_finish: true

install:
  # Fetch submodules
  - git submodule update --init --recursive
#  - if %platform% == "x64" SET PYTHON="%PYTHON%-%platform%"
  # Install new Python if necessary
  - ps: .\multibuild\install_python.ps1
  - choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
  - SET PATH="C:\\Program Files\\CMake\\bin\\";%PATH%
  - SET CMAKE_EXE="C:\\Program Files\\CMake\\bin\\make.exe"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
  - python -m pip install -U pip setuptools wheel urllib3

  # Fix MSVC builds for 64-bit Python. See:
  # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
  - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

  # Install OpenBLAS
#  - ps: |
#      $PYTHON = $env:PYTHON
#      $lib = python ./openblas_support.py
#      md $env:BLAS_LIBRARIES
#      $destination = "$env:BLAS_LIBRARIES/openblas.lib"
#      cp $lib $destination
#      ls $destination
  - curl -L -o ./open_blas_64.zip https://sourceforge.net/projects/openblas/files/v0.2.15/OpenBLAS-v0.2.15-Win64-int32.zip/download
#  - curl -L -o ./open_blas_32.zip https://sourceforge.net/projects/openblas/files/v0.2.15/OpenBLAS-v0.2.15-Win32.zip/download
#  - 7z x -y ./open_blas_32.zip -oC:\openblas > nul
  - 7z x -y ./open_blas_64.zip -oC:\openblas > nul
  - dir %BLAS_ROOT%

  # Install PkgConfig
  - curl -LO %GNOME_BASE_URL%/dependencies/pkg-config_0.26-1_win32.zip
  - curl -LO %GNOME_BASE_URL%/glib/2.28/glib_2.28.8-1_win32.zip
  - curl -LO %GNOME_BASE_URL%/dependencies/gettext-runtime_0.18.1.1-2_win32.zip
  - 7z x -y pkg-config_0.26-1_win32.zip -oC:\pkg-config > nul
  - 7z x -y glib_2.28.8-1_win32.zip -oC:\pkg-config > nul
  - 7z x -y gettext-runtime_0.18.1.1-2_win32.zip -oC:\pkg-config > nul

build_script:
  # Install the dependencies of the project.
  - python -m pip install %NP_BUILD_DEP%

  # Build wheel
  - python -m pip install wheel
  - cd %PACKAGE_DIR%
#    - git checkout %BUILD_COMMIT%
#    - git apply ..\patches\free_space_in_dir.path
#  - %CMAKE_EXE% .
  - python setup.py bdist_wheel

test_script:
  # create test env
  - virtualenv --python %PYTHON%\Python.exe test_env
  - test_env\Scripts\activate.bat
  - where python
  - python -m pip install %NP_TEST_DEP%

  # install from wheel
  - python -m pip install --pre --no-index --find-links %REPO_DIR%\dist\ %PACKAGE_NAME%

  # Change into an innocuous directory and find tests from installation
  - mkdir for_testing
  - cd for_testing
  - python --version
  - python -c "import astropy; astropy.test(remote_data='none')"
  - cd ..

artifacts:
  - path: "%REPO_DIR%\\dist\\*"

on_success:
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - python -m pip install wheelhouse-uploader
  - "python -m wheelhouse_uploader upload
    --no-ssl-check --local-folder=%REPO_DIR%\\dist --no-update-index wheels"